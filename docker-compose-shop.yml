version: '3'
services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus

  rabbitmq:
    image: rabbitmq:3-management   # 관리 UI 포함된 이미지
    container_name: rabbitmq
    ports:
      - "5672:5672"   # AMQP 프로토콜 (Spring, Node, Python 등에서 연결할 때 사용)
      - "15672:15672" # Management UI (http://localhost:15672)
    environment:
      RABBITMQ_DEFAULT_USER: guest   # 기본 사용자명
      RABBITMQ_DEFAULT_PASS: guest   # 기본 비밀번호
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq  # 데이터 영구 저장

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  sj-shop-service-v1:
    image: sooong137/sj-shop-service:1.0
    container_name: sj-shop-service-v1
    ports:
      - "8085:8080"

#  sj-shop-service-v2:
#    image: sooong137/sj-shop-service:add-redis-2.0
#    container_name: sj-shop-service-add-redis-v2
#    ports:
#      - "8095:8080"

volumes:
  rabbitmq_data: